"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchProcess = void 0;
var Async_1 = require("./Async");
var Deferred_1 = require("./Deferred");
var Error_1 = require("./Error");
var Object_1 = require("./Object");
var Parser_1 = require("./Parser");
var Pids_1 = require("./Pids");
var Stream_1 = require("./Stream");
var String_1 = require("./String");
var Task_1 = require("./Task");
/**
 * BatchProcess manages the care and feeding of a single child process.
 */
var BatchProcess = /** @class */ (function () {
    function BatchProcess(proc, opts, observer) {
        var _this = this;
        this.proc = proc;
        this.opts = opts;
        this.observer = observer;
        this.start = Date.now();
        this.lastJobFinshedAt = Date.now();
        // Only set to true when `proc.pid` is no longer in the process table.
        this.dead = false;
        this._taskCount = -1; // don't count the startupTask
        /**
         * Supports non-polling notification of `proc.pid` leaving the process table.
         */
        this._exited = new Deferred_1.Deferred();
        this.name = "BatchProcess(" + proc.pid + ")";
        this.logger = opts.logger;
        // don't let node count the child processes as a reason to stay alive
        this.proc.unref();
        this.proc.on("error", function (err) { return _this.onError("proc.error", err); });
        this.proc.on("close", function () { return _this.onExit("close"); });
        this.proc.on("exit", function () { return _this.onExit("exit"); });
        this.proc.on("disconnect", function () { return _this.onExit("disconnect"); });
        var stdin = this.proc.stdin;
        if (stdin == null)
            throw new Error("Given proc had no stdin");
        stdin.on("error", function (err) { return _this.onError("stdin.error", err); });
        var stdout = this.proc.stdout;
        if (stdout == null)
            throw new Error("Given proc had no stdout");
        stdout.on("error", function (err) { return _this.onError("stdout.error", err); });
        stdout.on("data", function (d) { return _this.onStdout(d); });
        Object_1.map(this.proc.stderr, function (stderr) {
            stderr.on("error", function (err) { return _this.onError("stderr.error", err); });
            stderr.on("data", function (err) { return _this.onStderr(err); });
        });
        this.streamDebouncer = Async_1.debounce(opts.streamFlushMillis);
        this.startupTask = new Task_1.Task(opts.versionCommand, Parser_1.SimpleParser);
        if (!this.execTask(this.startupTask)) {
            // This could also be considered a "start error", but if it's just an
            // internal bug and the process starts, don't veto because there's a bug:
            this.observer.onInternalError(new Error(this.name + " startup task was not submitted"));
        }
    }
    Object.defineProperty(BatchProcess.prototype, "pid", {
        get: function () {
            return this.proc.pid;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchProcess.prototype, "taskCount", {
        get: function () {
            return this._taskCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchProcess.prototype, "exited", {
        get: function () {
            return !this._exited.pending;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchProcess.prototype, "exitedPromise", {
        get: function () {
            return this._exited.promise;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchProcess.prototype, "ready", {
        get: function () {
            return (this.currentTask == null &&
                !this.startupTask.pending &&
                this._endPromise == null &&
                this.proc != null &&
                this.proc.stdin != null);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchProcess.prototype, "idle", {
        get: function () {
            return this.currentTask == null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchProcess.prototype, "idleMs", {
        get: function () {
            return this.idle ? Date.now() - this.lastJobFinshedAt : 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @return true if the child process is in the process table
     */
    BatchProcess.prototype.running = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.dead)
                    return [2 /*return*/, false];
                else
                    return [2 /*return*/, Pids_1.pidExists(this.pid).then(function (alive) {
                            if (!alive) {
                                // once a PID leaves the process table, it's gone for good:
                                _this.dead = true;
                                _this._endPromise = Promise.resolve();
                            }
                            return alive;
                        })];
                return [2 /*return*/];
            });
        });
    };
    BatchProcess.prototype.notRunning = function () {
        return this.running().then(function (ea) { return !ea; });
    };
    /**
     * @return {boolean} true if `this.end()` has been requested or the child
     * process has exited.
     */
    BatchProcess.prototype.ended = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._endPromise != null;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.notRunning()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2: return [2 /*return*/, _a];
                }
            });
        });
    };
    BatchProcess.prototype.notEnded = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.ended().then(function (ea) { return !ea; })];
            });
        });
    };
    // This must not be async, or new instances aren't started as busy (until the
    // startup task is complete)
    BatchProcess.prototype.execTask = function (task) {
        var _this = this;
        if (this.proc.stdin == null || this.proc.stdin.destroyed) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.end(false, "proc.stdin is null or destroyed");
            return false;
        }
        // We're not going to run this.running() here, because BatchCluster will
        // already have pruned the processes that have exitted unexpectedly just
        // milliseconds ago.
        if (this._taskCount >= 0 && !this.ready) {
            this.observer.onInternalError(new Error(this.name + ".execTask(" + task.command + "): not ready"));
            return false;
        }
        this._taskCount++;
        this.currentTask = task;
        var cmd = String_1.ensureSuffix(task.command, "\n");
        var timeoutMs = task === this.startupTask
            ? this.opts.spawnTimeoutMillis
            : this.opts.taskTimeoutMillis;
        if (timeoutMs > 0) {
            // logger().trace(this.name + ".execTask(): scheduling timeout", {
            //   command: task.command,
            //   timeoutMs,
            //   pid: this.pid
            // })
            this.currentTaskTimeout = setTimeout(function () { return _this.onTimeout(task, timeoutMs); }, timeoutMs);
        }
        // logger().debug(this.name + ".execTask(): starting", { cmd })
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        task.promise
            .catch(function (err) {
            return _this.startupTask === task
                ? _this.observer.onStartError(err)
                : _this.observer.onTaskError(err, task);
        })
            .then(function () {
            if (_this.currentTask === task) {
                _this.clearCurrentTask();
            }
        });
        try {
            this.proc.stdin.write(cmd);
            return true;
        }
        catch (err) {
            // child process went away. We should too.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.end(false, "proc.stdin.write(cmd)");
            return false;
        }
    };
    /**
     * End this child process.
     *
     * @param gracefully Wait for any current task to be resolved or rejected before shutting down the child process.
     * @param source who called end() (used for logging)
     * @return Promise that will be resolved when the process has completed. Subsequent calls to end() will ignore the parameters and return the first endPromise.
     */
    // NOT ASYNC! needs to change state immediately.
    BatchProcess.prototype.end = function (gracefully, source) {
        if (gracefully === void 0) { gracefully = true; }
        if (this._endPromise == null) {
            this._endPromise = this._end(gracefully, source);
        }
        return this._endPromise;
    };
    // NOTE: Must only be invoked by this.end(), and only expected to be invoked
    // once per instance.
    BatchProcess.prototype._end = function (gracefully, source) {
        if (gracefully === void 0) { gracefully = true; }
        return __awaiter(this, void 0, void 0, function () {
            var lastTask, _a, cmd, _b, _c;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        lastTask = this.currentTask;
                        this.clearCurrentTask();
                        if (!(lastTask != null)) return [3 /*break*/, 5];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        // Let's wait for streams to flush, as that may actually allow the task
                        // to complete successfully. Let's not wait forever, though.
                        return [4 /*yield*/, Promise.race([lastTask.promise, Async_1.delay(gracefully ? 2000 : 250)])];
                    case 2:
                        // Let's wait for streams to flush, as that may actually allow the task
                        // to complete successfully. Let's not wait forever, though.
                        _d.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _d.sent();
                        return [3 /*break*/, 4];
                    case 4:
                        if (lastTask.pending) {
                            lastTask.reject(new Error("end() called before task completed (" + JSON.stringify({
                                gracefully: gracefully,
                                source: source,
                            }) + ")"));
                        }
                        _d.label = 5;
                    case 5:
                        cmd = Object_1.map(this.opts.exitCommand, function (ea) { return String_1.ensureSuffix(ea, "\n"); });
                        // proc cleanup:
                        Error_1.tryEach([
                            function () { return Stream_1.mapNotDestroyed(_this.proc.stdin, function (ea) { return ea.end(cmd); }); },
                            function () { return Stream_1.mapNotDestroyed(_this.proc.stdout, function (ea) { return ea.destroy(); }); },
                            function () { return Stream_1.mapNotDestroyed(_this.proc.stderr, function (ea) { return ea.destroy(); }); },
                            function () { return _this.proc.disconnect(); },
                        ]);
                        _b = this.opts.cleanupChildProcs &&
                            gracefully &&
                            this.opts.endGracefulWaitTimeMillis > 0;
                        if (!_b) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.running()];
                    case 6:
                        _b = (_d.sent());
                        _d.label = 7;
                    case 7:
                        if (!_b) return [3 /*break*/, 13];
                        // Wait for the end command to take effect:
                        return [4 /*yield*/, this.awaitNotRunning(this.opts.endGracefulWaitTimeMillis / 2)
                            // If it's still running, send the pid a signal:
                        ];
                    case 8:
                        // Wait for the end command to take effect:
                        _d.sent();
                        return [4 /*yield*/, this.running()];
                    case 9:
                        if (!_d.sent()) return [3 /*break*/, 11];
                        return [4 /*yield*/, Pids_1.kill(this.proc.pid)
                            // Wait for the signal handler to work:
                        ];
                    case 10:
                        _d.sent();
                        _d.label = 11;
                    case 11: 
                    // Wait for the signal handler to work:
                    return [4 /*yield*/, this.awaitNotRunning(this.opts.endGracefulWaitTimeMillis / 2)];
                    case 12:
                        // Wait for the signal handler to work:
                        _d.sent();
                        _d.label = 13;
                    case 13:
                        _c = this.opts.cleanupChildProcs;
                        if (!_c) return [3 /*break*/, 15];
                        return [4 /*yield*/, this.running()];
                    case 14:
                        _c = (_d.sent());
                        _d.label = 15;
                    case 15:
                        if (!_c) return [3 /*break*/, 17];
                        this.logger().warn(this.name + ".end(): force-killing still-running child.");
                        return [4 /*yield*/, Pids_1.kill(this.proc.pid, true)];
                    case 16:
                        _d.sent();
                        _d.label = 17;
                    case 17: return [2 /*return*/, this.exitedPromise];
                }
            });
        });
    };
    BatchProcess.prototype.awaitNotRunning = function (timeout) {
        var _this = this;
        return Async_1.until(function () { return _this.notRunning(); }, timeout);
    };
    BatchProcess.prototype.onTimeout = function (task, timeoutMs) {
        if (task.pending) {
            this.onError("timeout", new Error("waited " + timeoutMs + "ms"), task);
        }
    };
    BatchProcess.prototype.onError = function (source, _error, task) {
        if (this._endPromise != null) {
            // We're ending already, so don't propogate the error.
            // This is expected due to race conditions stdin EPIPE and process shutdown.
            this.logger().debug(this.name + ".onError() post-end (expected and not propagated)", {
                source: source,
                _error: _error,
                task: task,
            });
            return;
        }
        if (task == null) {
            task = this.currentTask;
        }
        var error = new Error(source + ": " + Error_1.cleanError(_error.message));
        this.logger().warn(this.name + ".onError()", {
            source: source,
            task: Object_1.map(task, function (t) { return t.command; }),
            error: error,
        });
        if (_error.stack != null) {
            // Error stacks, if set, will not be redefined from a rethrow:
            error.stack = Error_1.cleanError(_error.stack);
        }
        // clear the task before ending so the onExit from end() doesn't retry the task:
        this.clearCurrentTask();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.end(false, "onError(" + source + ")");
        if (task != null && this.taskCount === 1) {
            this.logger().warn(this.name + ".onError(): startup task failed: " + error);
            this.observer.onStartError(error);
        }
        if (task != null) {
            if (task.pending) {
                task.reject(error);
            }
            else {
                this.observer.onInternalError(new Error(this.name + ".onError(" + error + ") cannot reject already-fulfilled task."));
            }
        }
    };
    BatchProcess.prototype.onExit = function (source) {
        this._exited.resolve();
        // no need to be graceful, it's just for bookkeeping:
        return this.end(false, "onExit(" + source + ")");
    };
    BatchProcess.prototype.onStderr = function (data) {
        if (String_1.blank(data))
            return;
        this.logger().info("onStderr(" + this.pid + "):" + data);
        var task = this.currentTask;
        if (task != null && task.pending) {
            task.onStderr(data);
            this.onData(task);
        }
        else if (this._endPromise == null) {
            // If we're ending and there isn't a task, don't worry about it.
            // Otherwise:
            this.observer.onInternalError(new Error("onStderr(" + data + ") no pending currentTask (task: " + task + ")"));
        }
    };
    BatchProcess.prototype.onStdout = function (data) {
        // logger().debug("onStdout(" + this.pid + "):" + data)
        if (data == null)
            return;
        var task = this.currentTask;
        if (task != null && task.pending) {
            this.observer.onTaskData(data, task);
            task.onStdout(data);
            this.onData(task);
        }
        else if (this._endPromise == null) {
            // If we're ending and there isn't a task, don't worry about it.
            // Otherwise:
            this.observer.onInternalError(new Error("onStdout(" + data + ") no pending currentTask (task: " + task + ")"));
        }
    };
    BatchProcess.prototype.onData = function (task) {
        // We might not have the final flushed contents of the streams (if we got stderr and stdout simultaneously.)
        // const ctx = {
        //   stdout: task.stdout,
        //   stderr: task.stderr
        // }
        var pass = this.opts.passRE.exec(task.stdout);
        if (pass != null) {
            return this.resolveCurrentTask(task, String_1.toS(pass[1]).trim(), task.stderr, true);
        }
        var failout = this.opts.failRE.exec(task.stdout);
        if (failout != null) {
            var msg = String_1.toS(failout[1]).trim();
            return this.resolveCurrentTask(task, msg, task.stderr, false);
        }
        var failerr = this.opts.failRE.exec(task.stderr);
        if (failerr != null) {
            var msg = String_1.toS(failerr[1]).trim();
            return this.resolveCurrentTask(task, task.stdout, msg, false);
        }
        return;
    };
    BatchProcess.prototype.clearCurrentTask = function () {
        Object_1.map(this.currentTaskTimeout, function (ea) { return clearTimeout(ea); });
        this.currentTaskTimeout = undefined;
        this.currentTask = undefined;
        this.lastJobFinshedAt = Date.now();
    };
    BatchProcess.prototype.resolveCurrentTask = function (task, stdout, stderr, passed) {
        var _this = this;
        this.streamDebouncer(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.clearCurrentTask();
                        if (!task.pending) return [3 /*break*/, 2];
                        return [4 /*yield*/, task.resolve(stdout, stderr, passed)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.observer.onIdle();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    return BatchProcess;
}());
exports.BatchProcess = BatchProcess;
//# sourceMappingURL=BatchProcess.js.map