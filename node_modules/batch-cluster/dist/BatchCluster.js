"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchCluster = exports.Task = exports.pids = exports.pidExists = exports.kill = exports.SimpleParser = exports.Deferred = exports.BatchClusterOptions = void 0;
var _p = require("process");
var timers_1 = require("timers");
var Array_1 = require("./Array");
var BatchClusterEmitter_1 = require("./BatchClusterEmitter");
var BatchClusterOptions_1 = require("./BatchClusterOptions");
var BatchProcess_1 = require("./BatchProcess");
var Deferred_1 = require("./Deferred");
var Mean_1 = require("./Mean");
var Mutex_1 = require("./Mutex");
var Object_1 = require("./Object");
var Pids_1 = require("./Pids");
var Rate_1 = require("./Rate");
var BatchClusterOptions_2 = require("./BatchClusterOptions");
Object.defineProperty(exports, "BatchClusterOptions", { enumerable: true, get: function () { return BatchClusterOptions_2.BatchClusterOptions; } });
var Deferred_2 = require("./Deferred");
Object.defineProperty(exports, "Deferred", { enumerable: true, get: function () { return Deferred_2.Deferred; } });
__exportStar(require("./Logger"), exports);
var Parser_1 = require("./Parser");
Object.defineProperty(exports, "SimpleParser", { enumerable: true, get: function () { return Parser_1.SimpleParser; } });
var Pids_2 = require("./Pids");
Object.defineProperty(exports, "kill", { enumerable: true, get: function () { return Pids_2.kill; } });
Object.defineProperty(exports, "pidExists", { enumerable: true, get: function () { return Pids_2.pidExists; } });
Object.defineProperty(exports, "pids", { enumerable: true, get: function () { return Pids_2.pids; } });
var Task_1 = require("./Task");
Object.defineProperty(exports, "Task", { enumerable: true, get: function () { return Task_1.Task; } });
/**
 * BatchCluster instances manage 0 or more homogeneous child processes, and
 * provide the main interface for enqueuing `Task`s via `enqueueTask`.
 *
 * Given the large number of configuration options, the constructor
 * receives a single options hash. The most important of these are the
 * `ChildProcessFactory`, which specifies the factory that creates
 * ChildProcess instances, and `BatchProcessOptions`, which specifies how
 * child tasks can be verified and shut down.
 */
var BatchCluster = /** @class */ (function (_super) {
    __extends(BatchCluster, _super);
    function BatchCluster(opts) {
        var _this = _super.call(this) || this;
        _this.m = new Mutex_1.Mutex();
        _this._tasksPerProc = new Mean_1.Mean();
        _this._procs = [];
        _this._lastUsedProcsIdx = 0;
        _this._lastSpawnedProcTime = 0;
        _this.tasks = [];
        _this.startErrorRate = new Rate_1.Rate();
        _this._spawnedProcs = 0;
        _this._internalErrorCount = 0;
        _this.childEndCounts = new Map();
        _this.beforeExitListener = function () { return _this.end(true); };
        _this.exitListener = function () { return _this.end(false); };
        _this.maybeLaunchNewChild = function () {
            return _this.m.runIfIdle(function () { return __awaiter(_this, void 0, void 0, function () {
                var child_1, proc_1, err_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Minimize start time system load. Only launch one new proc at a time
                            if (this.ended ||
                                this.tasks.length === 0 ||
                                this._procs.length >= this.options.maxProcs ||
                                this._lastSpawnedProcTime >
                                    Date.now() - this.options.minDelayBetweenSpawnMillis) {
                                return [2 /*return*/];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            this._lastSpawnedProcTime = Date.now();
                            return [4 /*yield*/, this.options.processFactory()];
                        case 2:
                            child_1 = _a.sent();
                            proc_1 = new BatchProcess_1.BatchProcess(child_1, this.options, this.observer);
                            if (this.ended) {
                                // This should only happen in tests.
                                void proc_1.end(false, "ended");
                            }
                            else {
                                this._procs.push(proc_1);
                                this.emitter.emit("childStart", child_1);
                                void proc_1.exitedPromise.then(function () {
                                    _this._tasksPerProc.push(proc_1.taskCount);
                                    _this.emitter.emit("childExit", child_1);
                                });
                            }
                            this._spawnedProcs++;
                            return [2 /*return*/, proc_1];
                        case 3:
                            err_1 = _a.sent();
                            this.emitter.emit("startError", err_1);
                            return [2 /*return*/];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
        };
        _this.options = Object.freeze(BatchClusterOptions_1.verifyOptions(opts));
        if (_this.options.onIdleIntervalMillis > 0) {
            _this.onIdleInterval = timers_1.setInterval(function () { return _this.onIdle(); }, _this.options.onIdleIntervalMillis);
            _this.onIdleInterval.unref(); // < don't prevent node from exiting
        }
        _this.logger = _this.options.logger;
        _this.observer = {
            onIdle: function () { return _this.onIdle(); },
            onStartError: function (err) { return _this.emitStartError(err); },
            onTaskData: function (data, task) {
                return _this.emitter.emit("taskData", data, task);
            },
            onTaskError: function (err, task) { return _this.emitter.emit("taskError", err, task); },
            onInternalError: function (err) { return _this.emitInternalError(err); },
        };
        _p.once("beforeExit", _this.beforeExitListener);
        _p.once("exit", _this.exitListener);
        return _this;
    }
    Object.defineProperty(BatchCluster.prototype, "ended", {
        get: function () {
            return this.endPromise != null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Shut down this instance, and all child processes.
     * @param gracefully should an attempt be made to finish in-flight tasks, or
     * should we force-kill child PIDs.
     */
    // NOT ASYNC so state transition happens immediately
    BatchCluster.prototype.end = function (gracefully) {
        var _this = this;
        if (gracefully === void 0) { gracefully = true; }
        if (this.endPromise == null) {
            this.emitter.emit("beforeEnd");
            Object_1.map(this.onIdleInterval, timers_1.clearInterval);
            this.onIdleInterval = undefined;
            _p.removeListener("beforeExit", this.beforeExitListener);
            _p.removeListener("exit", this.exitListener);
            this.endPromise = new Deferred_1.Deferred().observe(Promise.all(this._procs.map(function (p) {
                return p
                    .end(gracefully, "BatchCluster.end()")
                    .catch(function (err) { return _this.emitter.emit("endError", err); });
            }))
                .then(function () { return _this.emitter.emit("end"); })
                .then(function () { return undefined; }));
            this._procs.length = 0;
        }
        return this.endPromise;
    };
    /**
     * Submits `task` for processing by a `BatchProcess` instance
     *
     * @return a Promise that is resolved or rejected once the task has been
     * attempted on an idle BatchProcess
     */
    BatchCluster.prototype.enqueueTask = function (task) {
        var _this = this;
        if (this.ended) {
            task.reject(new Error("BatchCluster has ended, cannot enqueue " + task.command));
        }
        this.tasks.push(task);
        setImmediate(function () { return _this.onIdle(); });
        task.promise
            .then(function () { return _this.onIdle(); })
            .catch(function () {
            //
        });
        return task.promise;
    };
    Object.defineProperty(BatchCluster.prototype, "isIdle", {
        /**
         * @return true if all previously-enqueued tasks have settled
         */
        get: function () {
            return this.tasks.length === 0 && this._procs.every(function (ea) { return ea.idle; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchCluster.prototype, "pendingTasks", {
        /**
         * @return the number of pending tasks
         */
        get: function () {
            return this.tasks.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchCluster.prototype, "meanTasksPerProc", {
        /**
         * @returns {number} the mean number of tasks completed by child processes
         */
        get: function () {
            return this._tasksPerProc.mean;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchCluster.prototype, "spawnedProcs", {
        /**
         * @return the total number of child processes created by this instance
         */
        get: function () {
            return this._spawnedProcs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchCluster.prototype, "busyProcs", {
        /**
         * @return the current number of child processes currently servicing tasks
         */
        get: function () {
            return this._procs.filter(function (ea) { return ea.taskCount > 0 && !ea.exited && !ea.idle; }).length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchCluster.prototype, "internalErrorCount", {
        /**
         * For integration tests:
         */
        get: function () {
            return this._internalErrorCount;
        },
        enumerable: false,
        configurable: true
    });
    BatchCluster.prototype.emitInternalError = function (error) {
        this.emitter.emit("internalError", error);
        this.logger().error("BatchCluster: INTERNAL ERROR: " + error);
        this._internalErrorCount++;
    };
    BatchCluster.prototype.emitStartError = function (error) {
        this.logger().warn("BatchCluster.onStartError(): " + error);
        this.emitter.emit("startError", error);
        this.startErrorRate.onEvent();
        if (this.startErrorRate.eventsPerMinute >
            this.options.maxReasonableProcessFailuresPerMinute) {
            this.emitter.emit("endError", new Error(error +
                "(start errors/min: " +
                this.startErrorRate.eventsPerMinute.toFixed(2) +
                ")"));
            this.end();
        }
    };
    /**
     * Exposed only for unit tests
     *
     * @return the spawned PIDs that are still in the process table.
     */
    BatchCluster.prototype.pids = function () {
        return __awaiter(this, void 0, void 0, function () {
            var arr, _a, _b, pid, e_1_1;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        arr = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = __values(this._procs.map(function (p) { return p.pid; })), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        pid = _b.value;
                        return [4 /*yield*/, Pids_1.pidExists(pid)];
                    case 3:
                        if (_d.sent())
                            arr.push(pid);
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, arr];
                }
            });
        });
    };
    /**
     * Get ended process counts (used for tests)
     */
    BatchCluster.prototype.countEndedChildProcs = function (why) {
        var _a;
        return (_a = this.childEndCounts.get(why)) !== null && _a !== void 0 ? _a : 0;
    };
    // NOT ASYNC: updates internal state.
    BatchCluster.prototype.onIdle = function () {
        var _this = this;
        return this.m.runIfIdle(function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.vacuumProcs();
                while (this.execNextTask()) {
                    //
                }
                // setImmediate because we currently have the mutex
                if (this.tasks.length > 0)
                    setImmediate(function () { return _this.maybeLaunchNewChild(); });
                return [2 /*return*/];
            });
        }); });
    };
    // NOT ASYNC: updates internal state.
    BatchCluster.prototype.vacuumProcs = function () {
        var _this = this;
        Array_1.filterInPlace(this._procs, function (proc) {
            // Only idle procs are eligible for deletion:
            if (!proc.idle)
                return true;
            var old = _this.options.maxProcAgeMillis > 0 &&
                proc.start + _this.options.maxProcAgeMillis < Date.now();
            var wornOut = _this.options.maxTasksPerProcess > 0 &&
                proc.taskCount >= _this.options.maxTasksPerProcess;
            var idle = _this.options.maxIdleMsPerProcess > 0 &&
                proc.idleMs > _this.options.maxIdleMsPerProcess;
            var broken = proc.exited;
            var reap = old || wornOut || idle || broken; // # me
            if (reap) {
                var why = old ? "old" : wornOut ? "worn" : idle ? "idle" : "broken";
                _this.childEndCounts.set(why, 1 + _this.countEndedChildProcs(why));
                void proc.end(true, why);
            }
            return !reap;
        });
    };
    // NOT ASYNC: updates internal state.
    BatchCluster.prototype.execNextTask = function () {
        if (this.tasks.length === 0 || this.ended)
            return false;
        var readyProc = Array_1.rrFindResult(this._procs, this._lastUsedProcsIdx + 1, function (ea) { return ea.ready; });
        if (readyProc == null)
            return false;
        var task = this.tasks.shift();
        if (task == null) {
            this.emitInternalError(new Error("unexpected null task"));
            return false;
        }
        this._lastUsedProcsIdx = readyProc.index;
        var submitted = readyProc.result.execTask(task);
        if (!submitted) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueueTask(task);
        }
        return submitted;
    };
    return BatchCluster;
}(BatchClusterEmitter_1.BatchClusterEmitter));
exports.BatchCluster = BatchCluster;
//# sourceMappingURL=BatchCluster.js.map