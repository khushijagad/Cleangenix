"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debounce = exports.ratelimit = exports.until = exports.delay = void 0;
var timers_1 = require("timers");
var Object_1 = require("./Object");
function delay(millis, unref) {
    if (unref === void 0) { unref = false; }
    return new Promise(function (resolve) {
        var t = timers_1.setTimeout(function () { return resolve(); }, millis);
        if (unref)
            t.unref();
    });
}
exports.delay = delay;
/**
 * Run the given thunk until the promise is resolved to true, or the timeout
 * passes.
 */
function until(f, timeoutMs, delayMs) {
    if (delayMs === void 0) { delayMs = 50; }
    return __awaiter(this, void 0, void 0, function () {
        var timeoutAt, count;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    timeoutAt = Date.now() + timeoutMs;
                    count = 0;
                    _a.label = 1;
                case 1:
                    if (!(Date.now() < timeoutAt)) return [3 /*break*/, 6];
                    return [4 /*yield*/, f(count)];
                case 2:
                    if (!_a.sent()) return [3 /*break*/, 3];
                    return [2 /*return*/, true];
                case 3:
                    count++;
                    return [4 /*yield*/, delay(delayMs)];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5: return [3 /*break*/, 1];
                case 6: return [2 /*return*/, false];
            }
        });
    });
}
exports.until = until;
/**
 * Return a thunk that will call the underlying thunk at most every `minDelayMs`
 * milliseconds. The thunk will accept a boolean, that, when set, will force the
 * underlying thunk to be called (mostly useful for tests)
 */
function ratelimit(f, minDelayMs) {
    var next = 0;
    return function (force) {
        if (Date.now() > next || force === true) {
            next = Date.now() + minDelayMs;
            return f();
        }
        else {
            return;
        }
    };
}
exports.ratelimit = ratelimit;
/**
 * @returns a function that accepts a thunk. The thunk will be debounced.
 */
function debounce(timeoutMs) {
    var lastTimeout;
    return function (f) {
        Object_1.map(lastTimeout, clearTimeout);
        lastTimeout = timers_1.setTimeout(f, timeoutMs);
    };
}
exports.debounce = debounce;
//# sourceMappingURL=Async.js.map